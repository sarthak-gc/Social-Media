generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  userId           String     @id @unique @default(uuid())
  password         String
  pfp              String?
  firstName        String
  middleName       String?
  lastName         String
  email            String     @unique
  createdAt        DateTime   @default(now())
  posts            Post[]     @relation("UserPosts")
  relationsByThem  Relation[] @relation("friendsByThem")
  relationsByMe    Relation[] @relation("friendsByMe")
  requestsReceived Request[]  @relation("requestsReceived")
  requestsSent     Request[]  @relation("requestsSent")
}

model Request {
  requestId  String        @id @unique @default(uuid())
  senderId   String
  receiverId String
  createdAt  DateTime      @default(now())
  status     RequestStatus @default(PENDING)
  receiver   User          @relation("requestsReceived", fields: [receiverId], references: [userId])
  sender     User          @relation("requestsSent", fields: [senderId], references: [userId])
}

model Relation {
  relationId String       @id @unique @default(uuid())
  initiator  String
  receiver   String
  createdAt  DateTime     @default(now())
  type       RelationType
  sender     User         @relation("friendsByThem", fields: [initiator], references: [userId])
  accepter   User         @relation("friendsByMe", fields: [receiver], references: [userId])

  @@unique([initiator, receiver])
}

model Post {
  postId    String   @id @unique @default(uuid())
  posterId  String
  title     String?
  createdAt DateTime @default(now())
  images    Image[]
  user      User     @relation("UserPosts", fields: [posterId], references: [userId])
}

model Image {
  imageId String @unique @default(uuid())
  postId  String
  url     String
  Post    Post   @relation(fields: [postId], references: [postId])
}

enum RequestStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum RelationType {
  FRIENDS
  UNFRIENDED
  BLOCKED_BY_SENDER
  BLOCKED_BY_RECEIVER
}
