generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  userId               String         @id @unique @default(uuid())
  password             String
  pfp                  String?
  firstName            String
  middleName           String?
  lastName             String
  email                String         @unique
  createdAt            DateTime       @default(now())
  posts                Post[]         @relation("UserPosts")
  relationsByThem      Relation[]     @relation("friendsByThem")
  relationsByMe        Relation[]     @relation("friendsByMe")
  requestsReceived     Request[]      @relation("requestsReceived")
  requestsSent         Request[]      @relation("requestsSent")
  NotificationCreated  Notification[] @relation("creator")
  NotificationReceived Notification[] @relation("receiver")
  Reactions            Reactions[]
  Comments             Comment[]
}

model Request {
  requestId  String        @id @unique @default(uuid())
  senderId   String
  receiverId String
  createdAt  DateTime      @default(now())
  status     RequestStatus @default(PENDING)
  receiver   User          @relation("requestsReceived", fields: [receiverId], references: [userId])
  sender     User          @relation("requestsSent", fields: [senderId], references: [userId])
}

model Relation {
  relationId String       @id @unique @default(uuid())
  initiator  String
  receiver   String
  createdAt  DateTime     @default(now())
  type       RelationType
  sender     User         @relation("friendsByThem", fields: [initiator], references: [userId])
  accepter   User         @relation("friendsByMe", fields: [receiver], references: [userId])

  @@unique([initiator, receiver])
}

model Post {
  postId    String   @id @unique @default(uuid())
  posterId  String
  title     String?
  createdAt DateTime @default(now())
  images    Image[]
  user      User     @relation("UserPosts", fields: [posterId], references: [userId])

  reactions Int         @default(0)
  Reactions Reactions[]
  Comments  Comment[]
}

model Image {
  imageId String @unique @default(uuid())
  postId  String
  url     String
  Post    Post   @relation(fields: [postId], references: [postId])
}

model Notification {
  notificationId String           @unique @default(uuid())
  type           NotificationType
  creatorId      String
  receiverId     String
  isRead         Boolean          @default(false)
  postId         String?

  creator  User @relation("creator", references: [userId], fields: [creatorId])
  receiver User @relation("receiver", references: [userId], fields: [receiverId])
}

model Reactions {
  postId    String
  userId    String
  type      ReactionType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  Post Post @relation(fields: [postId], references: [postId])
  User User @relation(fields: [userId], references: [userId])

  @@unique([postId, userId])
}

model Comment {
  commentId   String   @unique @default(uuid())
  content     String
  postId      String
  commenterId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isUpdated   Boolean  @default(false)
  parentId    String?
  isDeleted   Boolean  @default(false)

  User    User      @relation(fields: [commenterId], references: [userId])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [commentId])
  replies Comment[] @relation("CommentReplies")
  Post    Post      @relation(fields: [postId], references: [postId])
}

enum RequestStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum RelationType {
  FRIENDS
  UNFRIENDED
  BLOCKED_BY_SENDER
  BLOCKED_BY_RECEIVER
}

enum NotificationType {
  POST
  REQUEST_SENT
  REQUEST_ACCEPTED
  COMMENT
  REACTED
}

enum ReactionType {
  HEART
  LIKE
  LAUGH
  ANGRY
  DISLIKE
}
